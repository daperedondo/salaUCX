
'use strict';

/** @see https://github.com/TotallyInformation/node-red-contrib-uibuilder/wiki/Front-End-Library---available-properties-and-methods */


// eslint-disable-next-line no-unused-vars
var app = new Vue({
    el: '#appInit',
    data: {
        startMsg    : 'Vue has started, waiting for messages',
        feVersion   : '',
        counterBtn  : 0,
        inputText   : null,
        inputChkBox : false,
        socketConnectedState : false,
        serverTimeOffset     : '[unknown]',
        imgProps             : { width: 75, height: 75 },

        msgRecvd    : '[Nothing]',
        msgsReceived: 0,
        msgCtrl     : '[Nothing]',
        msgsControl : 0,

        
        msgSent     : '[Nothing]',
        msgsSent    : 0,
        msgCtrlSent : '[Nothing]',
        msgsCtrlSent: 0,
        btnMute     :sessionStorage.getItem("statusBtnMute"),
        btnFreeze   :sessionStorage.getItem("statusBtnFreeze"),
        btnState    :sessionStorage.getItem("statusBtnState"),
        btnRecord   :sessionStorage.getItem("statusBtnRecord"),

        
    }, // --- End of data --- //
    computed: {
        hLastRcvd: function() {
            var msgRecvd = this.msgRecvd
            if (typeof msgRecvd === 'string') return 'Last Message Received = ' + msgRecvd
            else return 'Last Message Received = ' + this.syntaxHighlight(msgRecvd)
        },
        hLastSent: function() {
            var msgSent = this.msgSent
            if (typeof msgSent === 'string') return 'Last Message Sent = ' + msgSent
            else return 'Last Message Sent = ' + this.syntaxHighlight(msgSent)
        },
        hLastCtrlRcvd: function() {
            var msgCtrl = this.msgCtrl
            if (typeof msgCtrl === 'string') return 'Last Control Message Received = ' + msgCtrl
            else return 'Last Control Message Received = ' + this.syntaxHighlight(msgCtrl)
        },
        hLastCtrlSent: function() {
            var msgCtrlSent = this.msgCtrlSent
            if (typeof msgCtrlSent === 'string') return 'Last Control Message Sent = ' + msgCtrlSent
            //else return 'Last Message Sent = ' + this.callMethod('syntaxHighlight', [msgCtrlSent])
            else return 'Last Control Message Sent = ' + this.syntaxHighlight(msgCtrlSent)
        },
    }, // --- End of computed --- //
    methods: {
        
        // Evento interface UI_CTRL 
        UI_CTRL_evt: function(element, evt) {
            console.log(element, evt);
        // Creamos el objeto interface UI_CTRL
            var UI_CTRL = new Object();
            if (element == "CTRL_PROY" || element == "CTRL_VOL" || element == "CTRL_STATE" || element == "CTRL_SOURCE" || element == "CTRL_REC" || element == "CTRL_BTNSTATUS") {
                UI_CTRL[element] = evt;
            } /*else {
                UI_CTRL[element] = JSON.parse(evt);
                console.log(UI_CTRL.CTRL_VOL && UI_CTRL.CTRL_VOL.mute);
                var btnMute = this.getBtnMute();
                var btnFreeze = this.getBtnFreeze()
            //controlamos el estado de los botones simples
                if (UI_CTRL.CTRL_VOL && UI_CTRL.CTRL_VOL.mute){
                    if (btnMute == "\"on\"") {
                        console.log(btnMute == "\"on\"");
                        this.setBtnMute("off");
                    } else if (btnMute == "\"off\"") {
                        this.setBtnMute("on");
                    }
                }
                if (UI_CTRL.CTRL_PROY && UI_CTRL.CTRL_PROY.freeze){
                    if (btnFreeze == "\"on\"") {
                        this.setBtnFreeze("off");
                    } else if (btnFreeze == "\"off\"") {
                        this.setBtnFreeze("on");
                    }
                }
            }*/

        // env√≠o de datos a la logica de control
            uibuilder.send( {'topic': 'UI_CTRL', UI_CTRL} );
        },
        //Envia el valor de volume al mensaje de evento interface UI_CTRL
        useGetSliVolume: function() {
            var volume = getVolumeInput();
            return volume;
         },
        //Retorna el valor de state
        getBtnState: function (){
           
            this.btnState = sessionStorage.getItem("statusBtnState");
            return this.btnState;
        },

        //Retorna el valor de mute
        getBtnMute: function (){
           
            this.btnMute = sessionStorage.getItem("statusBtnMute");
            return this.btnMute;
        },
        //Retorna el valor de level
        getBtnLevel: function (){
           
            this.btnLevel = sessionStorage.getItem("statusBtnLevel");
            return this.btnLevel;
        },

        //Retorna el valor de PwrProy
        getBtnPwrProy: function (){
           
            this.btnPwrProy = sessionStorage.getItem("statusBtnPwrProy");
            return this.btnPwrProy;
        },
        //Retorna el valor de freeze
        getBtnFreeze: function (){
        
            this.btnFreeze = sessionStorage.getItem("statusBtnFreeze");
            return this.btnFreeze;
        },
        //Retorna el valor de Source
        getBtnSource: function (){
        
            this.btnSource = sessionStorage.getItem("statusBtnsSource");
            return this.btnSource;
        },

        //Retorna el valor de Record
        getBtnRecord: function (){
        
            this.btnRecord = sessionStorage.getItem("statusBtnRecord");
            return this.btnRecord;
        },

        //Retorna el valor de Tracking
        getBtnTracking: function (){
        
            this.btnTracking = sessionStorage.getItem("statusBtnTracking");
            return this.btnTracking;
        },
        //Retorna el valor de Preset
        getBtnPreset: function (){
        
            this.btnPreset = sessionStorage.getItem("statusBtnPreset");
            return this.btnPreset;
        },
        //Retorna el valor de Zoom
        getBtnZoom: function (){
        
            this.btnZoom = sessionStorage.getItem("statusBtnZoom");
            return this.btnZoom;
        },
        //Retorna el valor de Pantil
        getBtnPantil: function (){
        
            this.btnPantil = sessionStorage.getItem("statusBtnPantil");
            return this.btnPantil;
        },
        
        //Set state estatus
        setbtnState: function(estado){
            sessionStorage.setItem("statusBtnState", "\"" +estado+ "\"");
        },
        
        //Set mute estatus
         setBtnMute: function(estado){
            sessionStorage.setItem("statusBtnMute", "\"" +estado+ "\"");
        },
        //Set level estatus
         setBtnLevel: function(estado){
            sessionStorage.setItem("statusBtnLevel", "\"" +estado+ "\"");
        },

        //Set pwrProy estatus
         setBtnPwrProy: function(estado){
            sessionStorage.setItem("statusBtnPwrProy", "\"" +estado+ "\"");
        },
        //Set freeze estatus
        setBtnFreeze: function(estado){
            sessionStorage.setItem("statusBtnFreeze", "\"" +estado+ "\"");
        },
        //Set source estatus
        setBtnSource: function(estado){
            sessionStorage.setItem("statusBtnsSource", "\"" +estado+ "\"");
        },

        //Set record estatus
        setbtnRecord: function(estado){
            sessionStorage.setItem("statusBtnRecord", "\"" +estado+ "\"");
        },

        //Set tracking estatus
        setbtnTracking: function(estado){
            sessionStorage.setItem("statusBtnTracking", "\"" +estado+ "\"");
        },
        //Set preset estatus
        setbtnPreset: function(estado){
            sessionStorage.setItem("statusBtnPreset", "\"" +estado+ "\"");
        },
        //Set zoom estatus
        setbtnZoom: function(estado){
            sessionStorage.setItem("statusBtnZoom", "\"" +estado+ "\"");
        },
        //Set pantil estatus
        setbtnPantil: function(estado){
            sessionStorage.setItem("statusBtnPantil", "\"" +estado+ "\"");
        },
       
        

        
        // return formatted HTML version of JSON object
        syntaxHighlight: function(json) {
            json = JSON.stringify(json, undefined, 4)
            json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')
            json = json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
                var cls = 'number'
                if (/^"/.test(match)) {
                    if (/:$/.test(match)) {
                        cls = 'key'
                    } else {
                        cls = 'string'
                    }
                } else if (/true|false/.test(match)) {
                    cls = 'boolean'
                } else if (/null/.test(match)) {
                    cls = 'null'
                }
                return '<span class="' + cls + '">' + match + '</span>'
            })
            return json
        }, // --- End of syntaxHighlight --- //
    }, // --- End of methods --- //

    // Available hooks: init,mounted,updated,destroyed
    mounted: function(){
        // console.debug('[indexjs:Vue.mounted] app mounted - setting up uibuilder watchers')

        /** **REQUIRED** Start uibuilder comms with Node-RED @since v2.0.0-dev3
         * Pass the namespace and ioPath variables if hosting page is not in the instance root folder
         * The namespace is the "url" you put in uibuilder's configuration in the Editor.
         * e.g. If you get continual `uibuilderfe:ioSetup: SOCKET CONNECT ERROR` error messages.
         * e.g. uibuilder.start('uib', '/nr/uibuilder/vendor/socket.io') // change to use your paths/names
         */
        uibuilder.start()

        var vueApp = this

        // Example of retrieving data from uibuilder
        vueApp.feVersion = uibuilder.get('version')

        /** You can use the following to help trace how messages flow back and forth.
         * You can then amend this processing to suite your requirements.
         */
        this.$nextTick(function () {
            uibuilder.send({'topic': 'UI_CTRL',
                        'UI_CTRL': {
                            'CTRL_BTNSTATUS' : 'get'
                        },
                    })
        })


        //#region ---- Trace Received Messages ---- //
        // If msg changes - msg is updated when a standard msg is received from Node-RED over Socket.IO
        // newVal relates to the attribute being listened to.

        /**Funcion para controlar los mensajes de entrada**/
        uibuilder.onChange('msg', function(msg){
            vueApp.msgRecvd = msg;

        /**Debido a que no podemos controlar la entrada de un msg concreto desde los parametros de la funcion,
         * se controla mediante la creacion de una variable con el mensaje concreto.  **/
            var uiCtrl = msg.UI_CTRL;
            console.log(msg);

            if (uiCtrl.CTRL_BTNSTATUS) {
                //console.log(msg.UI_CTRL);
                ctrlBtnStatus(uiCtrl.CTRL_BTNSTATUS, uiCtrl.CTRL_BTNSTATUS.ERROR);

            }
            if (uiCtrl.CTRL_STATE) {
            //     ctrlSta(uiCtrl.CTRL_STATE);
                console.log("1");
            }
            if (uiCtrl.CTRL_VOL) {
                ctrlVol(uiCtrl.CTRL_VOL);
                console.log("2");
            }
            if (uiCtrl.CTRL_PROY) {
                console.log(uiCtrl);
                ctrlProy(uiCtrl.CTRL_PROY)
                console.log("3");
            }
            if (uiCtrl.CTRL_SOURCE) {
                ctrlSource(uiCtrl.CTRL_SOURCE)
                console.log("4");
            }
            if (uiCtrl.CTRL_REC) {
                ctrlRec(uiCtrl.CTRL_REC)
                console.log("5");
            }
            if (uiCtrl.CTRL_CAM) {
                ctrlCam(uiCtrl.CTRL_CAM)
                console.log("6");
            }
        })



        // As we receive new messages, we get an updated count as well
        uibuilder.onChange('msgsReceived', function(newVal){
            //console.info('[indexjs:uibuilder.onChange] Updated count of received msgs:', newVal)
            vueApp.msgsReceived = newVal
        })

        // If we receive a control message from Node-RED, we can get the new data here - we pass it to a Vue variable
        uibuilder.onChange('ctrlMsg', function(newVal){
            //console.info('[indexjs:uibuilder.onChange:ctrlMsg] CONTROL msg received from Node-RED server:', newVal)
            vueApp.msgCtrl = newVal
        })
        // Updated count of control messages received
        uibuilder.onChange('msgsCtrl', function(newVal){
            //console.info('[indexjs:uibuilder.onChange:msgsCtrl] Updated count of received CONTROL msgs:', newVal)
            vueApp.msgsControl = newVal
        })
        //#endregion ---- End of Trace Received Messages ---- //

        //#region ---- Trace Sent Messages ---- //
        // You probably only need these to help you understand the order of processing //
        // If a message is sent back to Node-RED, we can grab a copy here if we want to
        uibuilder.onChange('sentMsg', function(newVal){
            //console.info('[indexjs:uibuilder.onChange:sentMsg] msg sent to Node-RED server:', newVal)
            vueApp.msgSent = newVal
        })
        // Updated count of sent messages
        uibuilder.onChange('msgsSent', function(newVal){
            //console.info('[indexjs:uibuilder.onChange:msgsSent] Updated count of msgs sent:', newVal)
            vueApp.msgsSent = newVal
        })

        // If we send a control message to Node-RED, we can get a copy of it here
        uibuilder.onChange('sentCtrlMsg', function(newVal){
            //console.info('[indexjs:uibuilder.onChange:sentCtrlMsg] Control message sent to Node-RED server:', newVal)
            vueApp.msgCtrlSent = newVal
        })
        // And we can get an updated count
        uibuilder.onChange('msgsSentCtrl', function(newVal){
            //console.info('[indexjs:uibuilder.onChange:msgsSentCtrl] Updated count of CONTROL msgs sent:', newVal)
            vueApp.msgsCtrlSent = newVal
        })
        //#endregion ---- End of Trace Sent Messages ---- //

        // If Socket.IO connects/disconnects, we get true/false here
        uibuilder.onChange('ioConnected', function(newVal){
            //console.info('[indexjs:uibuilder.onChange:ioConnected] Socket.IO Connection Status Changed to:', newVal)
            vueApp.socketConnectedState = newVal
        })
        // If Server Time Offset changes
        uibuilder.onChange('serverTimeOffset', function(newVal){
            //console.info('[indexjs:uibuilder.onChange:serverTimeOffset] Offset of time between the browser and the server has changed to:', newVal)
            vueApp.serverTimeOffset = newVal
        })

    } // --- End of mounted hook --- //

}) // --- End of app1 --- //



// EOF